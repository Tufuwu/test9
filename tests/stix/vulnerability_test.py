"""Tests for the Stix2 bindings."""

import pytest

from stix2 import Vulnerability as StixVulnerability
from yeti.core.entities.vulnerability import Vulnerability


@pytest.mark.usefixtures('clean_db')
def test_vulnerability_creation():
    """Tests the creation of a single Vulnerability object."""
    vulnerability = Vulnerability(
        name='CVE-2017-0199',
        description='Massive RTF ownage',
    )
    # pylint: disable=protected-access
    assert vulnerability._stix_object is not None
    assert isinstance(vulnerability._stix_object, StixVulnerability)

@pytest.mark.usefixtures('clean_db')
def test_update_vulnerability():
    """Tests that a Vulnerability object is succesfully updated."""

    vulnerability = Vulnerability(
        name='CVE-2017-0199',
        description='Massive RTF ownage',
    )
    vulnerability.save()
    modified_time = vulnerability.modified
    stix_id = vulnerability.id
    updated = vulnerability.update({'name': 'MS08-067'})
    assert updated.id == stix_id
    assert updated.name == 'MS08-067'
    assert updated.description == 'Massive RTF ownage'
    assert modified_time < updated.modified
