"""Tests for the Malware API."""

import json
import pytest

# pylint: disable=fixme
# TODO: Consider using pytest-flask for easier testing flask stuff, e.g.:
# - Access to url_for objects to test routes
# - Access to .json attribute of request

@pytest.mark.usefixtures('clean_db')
def test_index(populate_malware, authenticated_client):
    """Test that fetched Malware objects are well-formed"""
    names = [malware.name for malware in populate_malware]
    for name in names:
        query_json = {'name': name}
        rv = authenticated_client.post('/api/entities/filter/',
                                       data=json.dumps(query_json),
                                       content_type='application/json')
        response = json.loads(rv.data)
        for item in response:
            assert item['id'].startswith('malware--')
            assert len(item['labels']) >= 1

@pytest.mark.usefixtures('clean_db', 'populate_malware')
def test_malware_creation(authenticated_client):
    query_json = {'name': 'TestMalware', 'labels': ['trojan'], 'type': 'malware'}
    rv = authenticated_client.post('/api/entities/',
                                   data=json.dumps(query_json),
                                   content_type='application/json')
    response = json.loads(rv.data)
    assert rv.status_code == 200
    assert response['id'].startswith('malware--')
    assert response['labels'] == ['trojan']

@pytest.mark.usefixtures('clean_db')
def test_put(populate_malware, authenticated_client):
    """Tests updating a new object via PUT."""
    rv = authenticated_client.get('/api/entities/{0:s}/'.format(populate_malware[0].id))
    entity_json = json.loads(rv.data)
    rv = authenticated_client.put('/api/entities/{0:s}/'.format(entity_json['id']),
                                  data=json.dumps({'labels': ['newlabel']}),
                                  content_type='application/json')
    response = json.loads(rv.data)
    assert rv.status_code == 200
    assert response['name'] == populate_malware[0].name
    assert response['labels'] == ['newlabel']
    assert response['type'] == 'malware'
