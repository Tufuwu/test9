
%!PS-Adobe-2.0 EPSF-2.0
%%Creator: Michael Price
%%CreationDate: 12/23/2007
%%Title: {{ file_name }}
%%BoundingBox: 0 0 216 162

/offsetx {% if crowded %}30{% else %}18{% endif %} def
/offsety {% if crowded %}48{% else %}36{% endif %} def
/max_x 216 offsetx sub def
/max_y 162 offsety sub def

%%  From 'graph paper' at http://www.nd.edu/~taylor/ComputerStuff/Postscript/graphpaper.html
/axes{
   newpath
   mX 0 moveto
   pX 0 lineto
    stroke
   0 mY moveto
   0 pY lineto
   stroke } def

/Xtick{
%% puts ticks along the x-axis from the origin 
%% with displacement xTick until pX to the right and mX to the left
xTick xTick pX
{
0 moveto
0   tickSize rmoveto
0   tickSize -2 mul rlineto 
}for
/nT{xTick -1 mul}def
nT nT mX
{
0 moveto
0   tickSize rmoveto
0   tickSize -2 mul rlineto 
}for
stroke} def

/Ytick{
%% puts ticks along the y-axis from the origin 
%% with displacement yTick until pY up and mY down
yTick yTick pY
{
0 exch moveto
tickSize  0 rmoveto
tickSize -2 mul  0 rlineto 
}for
/nT{yTick -1 mul}def
nT nT mY
{
0 exch moveto
tickSize  0 rmoveto
tickSize -2 mul  0 rlineto 
}for stroke
} def

%%%%%%%  Axes - generic values, reset as needed

/tickSize{3}def
/pX{% if crowded %}{168}{% else %}{180}{% endif %}def       %% Positive x-axis length
/pY{% if crowded %}{96}{% else %}{108}{% endif %}def       %% Positive y-axis length
/mX{0}def      %% Negative x-axis length
/mY{0}def      %% Negative y-axis length
/xTick{sectionwidth} def    %% tick length for x-axis
/yTick{20} def    %% tick length for y-axis
/yspacepos{4} def
/yspaceneg{-12} def

/Narr{ [(-1) (-2) (-3) (-4) ]} def  %% the negative labels
/Parr{ [(1) (2) (3) (4)]} def       %% the positive labels

%
% functions from http://www.redgrittybrick.org/postscript/gradient.html
%
/inch { 72 mul } def
/dpi { 72 div } def
/Rez 150 dpi def % calc lines per point for fill
/Step 1 Rez div def
/StartHSB { /B1 exch def /S1 exch def /H1 exch def } def
/EndHSB { /B2 exch def /S2 exch def /H2 exch def
/Steps s Step div def
/Hstep H2 H1 sub Steps div def
/Sstep S2 S1 sub Steps div def
/Bstep B2 B1 sub Steps div def
} def
/StepHSB { /H1 H1 Hstep add def
/S1 S1 Sstep add def
/B1 B1 Bstep add def
H1 S1 B1 sethsbcolor
} def 

/sectionwidth pX {{ num_keys }} div def
/maxfreq {{ max_freq }} def
0.4 setlinewidth

%% Fills probably go here

offsetx offsety translate

axes
Xtick
%%  Ytick

%% Graphs probably go here

%% Labels

/Arial findfont
10 scalefont
setfont

{% for ans in results %}

/currentsection {{ forloop.counter0 }} def
/xmin currentsection sectionwidth mul sectionwidth 5 div add def
/xlabel currentsection sectionwidth mul sectionwidth 2 div add def
/xmax currentsection sectionwidth mul sectionwidth 5 div 4 mul add def
/ymin 0 def
/ymax {{ ans.freq }} {{ max_freq }} div 0.9 mul pY mul def

newpath
xmin ymin moveto
xmax ymin lineto
xmax ymax lineto
xmin ymax lineto
closepath
gsave
clip % set path as a clipping path for our infill
%%  90 rotate % so fill is diagonal
Step setlinewidth
/s 2 inch def
0.6 0.0 0.4 StartHSB
0.6 1.0 0.7 EndHSB
1 Step s {
StepHSB
newpath
0 inch exch moveto % position left hand side
4 inch 0 rlineto % draw a line
stroke
} for

grestore
0 0 0 setrgbcolor
stroke

/sw1 ({{ ans.freq }}) stringwidth pop def
xlabel sw1 2 div sub ymax yspaceneg add moveto
1 1 1 setrgbcolor
({{ ans.freq }}) show

/sw2 ({{ ans.value }}) stringwidth pop def
{% if crowded %}
xlabel sw2 0.924 mul sub sectionwidth 4 div add yspaceneg sw2 0.383 mul sub moveto
gsave
22.5 rotate
{% else %}
xlabel sw2 2 div sub yspaceneg moveto
gsave
{% endif %}
%% sw2 yspaceneg 2 div translate
0 0 0 setrgbcolor
({{ ans.value }}) show
grestore

{% endfor %}

0 0 0.5 setrgbcolor

/sw1 (Response) stringwidth pop def
pX sw1 sub 2 div yspaceneg {% if crowded %}3.5{% else %}2{% endif %} mul moveto
(Response) show
/sw2 (Histogram of responses) stringwidth pop def
pX sw2 sub 2 div pY yspacepos add moveto
(Histogram of responses) show

90 rotate
/sw3 (Frequency) stringwidth pop def
pY sw3 sub 2 div yspacepos 2 mul moveto
(Frequency) show

showpage
