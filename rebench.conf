# -*- mode: yaml -*-
# Config file for ReBench
default_experiment: all
default_data_file: 'rebench.data'

reporting:
    # Benchmark results will be reported to ReBenchDB
    rebenchdb:
        # this url needs to point to the API endpoint
        db_url: https://rebench.stefan-marr.de/rebenchdb
        repo_url: https://github.com/smarr/RPySOM
        record_all: true # make sure everything is recorded
        project_name: RPySOM

runs:
    max_invocation_time: 6000

benchmark_suites:
    macro-startup:
        gauge_adapter: RebenchLog
        command: &MACRO_CMD "-cp Smalltalk:Examples/Benchmarks/Richards:Examples/Benchmarks/DeltaBlue:Examples/Benchmarks/NBody:Examples/Benchmarks/Json:Examples/Benchmarks/GraphSearch Examples/Benchmarks/BenchmarkHarness.som %(benchmark)s %(iterations)s 0 "
        iterations: 1
        invocations: 5
        benchmarks:
            - Richards:     {extra_args: 1}
            - DeltaBlue:    {extra_args: 100}
            - NBody:        {extra_args: 1000}
            - Json:         {extra_args: 1}
            - GraphSearch:  {extra_args: 7}
            - PageRank:     {extra_args: 75}

    macro-steady:
        gauge_adapter: RebenchLog
        command: *MACRO_CMD
        benchmarks:
            - Richards:     {extra_args: 40,     warmup:  30,   iterations: 130}
            - DeltaBlue:    {extra_args: 10000,  warmup:  20,   iterations: 120}
            - NBody:        {extra_args: 200000, warmup:  20,   iterations: 120}
            - Json:         {extra_args: 80,     warmup:  20,   iterations: 120}
            - GraphSearch:  {extra_args: 25,     warmup: 100,   iterations: 250}
            - PageRank:     {extra_args: 1000,   warmup:  20,   iterations: 120}


    micro-startup:
        gauge_adapter: RebenchLog
        command: &MICRO_CMD "-cp Smalltalk:Examples/Benchmarks/LanguageFeatures Examples/Benchmarks/BenchmarkHarness.som %(benchmark)s %(iterations)s 0 "
        iterations: 1
        invocations: 5
        benchmarks:
            - Fannkuch:     {extra_args: 7}
            - Fibonacci:    {extra_args: 10}
            - Dispatch:     {extra_args: 10}
            - Bounce:       {extra_args: 10}
            - Loop:         {extra_args: 100}
            - Permute:      {extra_args: 10}
            - Queens:       {extra_args: 10}
            - List:         {extra_args: 2}
            - Recurse:      {extra_args: 12}
            - Storage:      {extra_args: 8}
            - Sieve:        {extra_args: 20}
            - BubbleSort:   {extra_args: 15}
            - QuickSort:    {extra_args: 15}
            - Sum:          {extra_args: 40}
            - Towers:       {extra_args: 2}
            - TreeSort:     {extra_args: 7}
            - IntegerLoop:  {extra_args: 7}
            - FieldLoop:    {extra_args: 1}
            - WhileLoop:    {extra_args: 30}
            - Mandelbrot:   {extra_args: 50}

    micro-steady:
        gauge_adapter: RebenchLog
        command: *MICRO_CMD
        benchmarks:
            - Fannkuch:     {extra_args: 9,      warmup:   5,   iterations:  55}
            - Fibonacci:    {extra_args: 1000,   warmup:  10,   iterations:  60}
            - Dispatch:     {extra_args: 10000,  warmup:   5,   iterations:  55}
            - Bounce:       {extra_args: 4000,   warmup:  10,   iterations:  60}
            - Loop:         {extra_args: 10000,  warmup:   5,   iterations:  55}
            - Permute:      {extra_args: 1500,   warmup:   5,   iterations:  55}
            - Queens:       {extra_args: 1000,   warmup:   5,   iterations:  55}
            - List:         {extra_args: 1000,   warmup:  15,   iterations:  65}
            - Recurse:      {extra_args: 2000,   warmup:  15,   iterations:  65}
            - Storage:      {extra_args: 1000,   warmup:  10,   iterations:  60}
            - Sieve:        {extra_args: 2500,   warmup:  10,   iterations:  60}
            - BubbleSort:   {extra_args: 3000,   warmup:   5,   iterations:  55}
            - QuickSort:    {extra_args: 2000,   warmup:   5,   iterations:  55}
            - Sum:          {extra_args: 10000,  warmup:   5,   iterations:  55}
            - Towers:       {extra_args: 1000,   warmup:   5,   iterations:  55}
            - TreeSort:     {extra_args: 1000,   warmup:  10,   iterations:  60}
            - IntegerLoop:  {extra_args: 8000,   warmup:   5,   iterations:  55}
            - FieldLoop:    {extra_args: 900,    warmup:   5,   iterations:  55}
            - WhileLoop:    {extra_args: 9000,   warmup:   5,   iterations:  55}
            - Mandelbrot:   {extra_args: 1000,   warmup:  10,   iterations: 110}

    micro-somsom:
        gauge_adapter: RebenchLog
        command: "-cp Smalltalk:Examples/Benchmarks/LanguageFeatures Examples/Benchmarks/BenchmarkHarness.som %(benchmark)s %(iterations)s 0 "
        iterations: 1
        benchmarks:
            - Loop:         {extra_args: 1}
            - Queens:       {extra_args: 1}
            - List:         {extra_args: 1}
            - Recurse:      {extra_args: 1}
            - Mandelbrot:   {extra_args: 3}

executors:
    RPySOM-ast-interp:
        path: .
        executable: som-ast-interp
    RPySOM-bc-interp:
        path: .
        executable: som-bc-interp
    RPySOM-ast-jit:
        path: .
        executable: som-ast-jit
    RPySOM-bc-jit:
        path: .
        executable: som-bc-jit

    SomSom-ast-interp:
        path: .
        executable: som-ast-interp
        args: "-cp core-lib/Smalltalk:core-lib/TestSuite:core-lib/SomSom/src/compiler:core-lib/SomSom/src/vm:core-lib/SomSom/src/vmobjects:core-lib/SomSom/src/interpreter:core-lib/SomSom/src/primitives core-lib/SomSom/src/vm/Main.som"
    SomSom-bc-interp:
        path: .
        executable: som-bc-interp
        args: "-cp core-lib/Smalltalk:core-lib/TestSuite:core-lib/SomSom/src/compiler:core-lib/SomSom/src/vm:core-lib/SomSom/src/vmobjects:core-lib/SomSom/src/interpreter:core-lib/SomSom/src/primitives core-lib/SomSom/src/vm/Main.som"


# define the benchmarks to be executed for a re-executable benchmark run
experiments:
    RPySOM:
        description: All benchmarks on RPySOM (AST and Bytecode Interpreters)
        executions:
            - RPySOM-ast-interp:
                suites:
                    - micro-startup
                    - macro-startup
            - RPySOM-bc-interp:
                suites:
                    - micro-startup
                    - macro-startup
            - RPySOM-ast-jit:
                suites:
                    - micro-startup
                    - micro-steady
                    - macro-startup
                    - macro-steady
            - RPySOM-bc-jit:
                suites:
                    - micro-startup
                    - micro-steady
                    - macro-startup
                    - macro-steady
    SomSom:
      description: Just startup benchmarks on SomSom
      suites:
        - micro-somsom
      executions:
        - SomSom-ast-interp
        - SomSom-bc-interp
